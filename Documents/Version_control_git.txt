PS C:\Users\PLEXTEK> git --version
git version 2.46.1.windows.1

Make sure your terminal in VS Code is in the correct project folder. If not, you can change the directory using:
PS C:\Users\PLEXTEK> cd C:\Users\PLEXTEK\Documents\Programming

1. Check Proxy Settings if you encounter errors like - fatal: unable to access 'https://github.com/kavishbhardwaj/cs50Python.git/': OpenSSL/3.2.3: error:0A0000C6:SSL routines::packet length too long
Since you're using a proxy, make sure your Git configuration is aware of it. Run the following commands to set up your proxy for Git:

PS C:\Users\PLEXTEK\Documents\Programming> git config --global http.proxy http://kavish:Shivam%214%21@10.31.31.10:8128
>> git config --global https.proxy https://kavish:Shivam%214%21@10.31.31.10:8128

2. Disable SSL Verification
If the SSL issue persists, you can temporarily disable SSL verification for Git by running this command:
PS C:\Users\PLEXTEK\Documents\Programming> git config --global http.sslVerify false

Initialize Git (if not already done)
If you havenâ€™t initialized Git in this project before, you need to run:
git init
This creates a .git folder in your project directory, turning it into a Git repository.

git clone / git remote add origin

Add Your Remote Repository: Since your remote repository is on GitHub, you need to link your local Git repository to the remote GitHub repository. Run this command to add the remote repository:

git remote add origin https://github.com/kavishbhardwaj/cs50Python.git
You only need to do this once. If youâ€™ve already added the remote, you can skip this step. You can check if the remote is added with

git remote -v

What happens when you run git remote add origin:

It does not copy any files or history from the remote repository.
It simply associates your local repository with a remote repository under the alias origin.
After adding the remote, you can push, pull, or fetch from the remote repository.
When to use git remote add origin:

When you already have a local repository and now want to push it to a remote server (e.g., GitHub).
Example: You created a project on your machine and now want to upload it to GitHub.

PS C:\Users\PLEXTEK\Documents\Programming> git clone https://github.com/kavishbhardwaj/cs50Python.git

What happens when you run git clone:
A new directory named cs50Python will be created locally.
The repositoryâ€™s contents (all files and folders) are copied into this directory.
It automatically sets the remote URL as origin (pointing to https://github.com/kavishbhardwaj/cs50Python.git).

When to use git clone:
When you are starting from scratch on a project and you want a local copy of a repository that already exists on a remote server.



3. Navigate to your cloned repository:
In the terminal (inside VS Code or Command Prompt), navigate to your cloned repository directory:

PS C:\Users\PLEXTEK\Documents\Programming> cd C:\Users\PLEXTEK\Documents\Programming\cs50Python

4. Check Git status:
Before adding your changes, it's good practice to check which files have been modified or are untracked. To see the current status of your changes, use:
PS C:\Users\PLEXTEK\Documents\Programming\cs50Python> git status

5. Stage the changes:
To stage all the modified files for commit, use:
PS C:\Users\PLEXTEK\Documents\Programming\cs50Python> git add . 

6. If you want to stage a specific file, you can do: git add <filename>

7.Commit the changes:
After staging your changes, you need to commit them. Add a message describing the changes you've made:
PS C:\Users\PLEXTEK\Documents\Programming\cs50Python> git commit -m "Your commit message here"

8. Push the changes to GitHub:
Now, push your committed changes to the remote repository:

git push origin main

Replace main with the correct branch name if your repository uses a different branch (e.g., master).

9. Enter credentials (if prompted):
If prompted, enter your GitHub username and password (or a Personal Access Token if GitHub requires it for authentication).

Additional Notes:
If this is your first time pushing, and you need to set the upstream branch, use this command instead:
git push -u origin main






If you are working on two different local machines and want to keep everything in sync with the remote repository, GitHub makes this process straightforward. Hereâ€™s a step-by-step guide on how to keep your changes synced across multiple local machines using GitHub as the remote repository.

### General Workflow for Syncing Across Machines

#### 1. **Set Up the Project on Both Machines**

If you havenâ€™t already, clone the repository to both machines so they are connected to the same remote repository on GitHub.

On **Machine 1** and **Machine 2**, run:

```bash
git clone https://github.com/kavishbhardwaj/cs50Python.git
```

This will download the project from GitHub onto both machines and set up `origin` as the remote repository.

#### 2. **Always Pull the Latest Changes Before Working**

Whenever you switch to a machine to start working on the project, you should always **pull** the latest changes from the remote repository to make sure your local copy is up to date.

On either **Machine 1** or **Machine 2**, run:

```bash
git pull origin main
```

This command will:
- **Fetch** the latest changes from the remote repository on GitHub.
- **Merge** those changes into your local working copy.

ðŸ’¡ **Tip**: Always pull before you start working on new changes, especially when switching between machines.

#### 3. **Make Changes and Commit Locally**

After pulling the latest changes, you can make your modifications locally. Once youâ€™ve made changes, you need to add and commit them:

```bash
git add .
git commit -m "Describe the changes you made"
```

This stages the files (`git add .`) and commits them locally (`git commit -m`).

#### 4. **Push the Changes to GitHub**

Once youâ€™ve committed the changes on one machine, you need to **push** them to the remote repository so that the other machine can fetch the updates.

```bash
git push origin main
```

This sends the changes from your local machine to the remote GitHub repository.

#### 5. **On the Other Machine: Pull the Changes Before Working**

When you switch to the other machine, you need to **pull** the changes that were made on the first machine. This ensures that both machines stay in sync.

On **Machine 2**, run:

```bash
git pull origin main
```

This will bring all the changes made on **Machine 1** into **Machine 2**.

#### 6. **Repeat the Process**

For every session:
1. **Pull** before you start working to ensure you have the latest updates.
2. **Commit** and **Push** changes when you're done working on one machine.
3. When switching machines, **pull** the changes from GitHub before starting work again.

### Dealing with Potential Merge Conflicts

Occasionally, you might run into **merge conflicts** if you made changes to the same file on both machines without pulling first. Git will notify you about the conflict, and youâ€™ll have to resolve it manually.

Stashing in Git is a way to temporarily set aside your local changes that are not ready to be committed, allowing you to work on something else, like pulling new changes or merging a branch. When you use git stash, it does not push your changes to the online repository; it just saves your current working directory's modifications in a "stash stack" locally and restores the working directory to a clean state. What happens when you git stash: All modified and staged changes in your working directory are saved to a stash. Your working directory becomes clean, as if you didnâ€™t make any changes at all. The changes are not committed or pushed to the remote repository. They remain stored locally in your stash list until you apply or pop them.

Workflow:
Stash your changes: If you have uncommitted changes but want to pull or merge code from the remote repository, you can stash them:

git stash

This will remove the changes from your working directory and store them safely in the stash.

Pull or merge: After stashing, you can pull the latest code from the online repository or merge a branch:

git pull origin <branch>
or

git merge <branch>
Now, your local repository will be updated with the changes from the online repository or the other branch.

Apply your stashed changes: Once the pull or merge is complete, you can bring your stashed changes back:

git stash pop
This will apply the stashed changes back to your working directory and remove the changes from the stash list. If there are any conflicts between your stashed changes and the newly pulled code, Git will prompt you to resolve them.



Steps to resolve conflicts:
1. Git will show you the conflicting sections of the file.
2. Edit the file to resolve the conflict.
3. After resolving conflicts, stage the file again:
   ```bash
   git add <filename>
   ```
4. Commit the merge:
   ```bash
   git commit -m "Resolve merge conflict"
   ```

Once the conflict is resolved, you can push the changes.



By following this process, you ensure that both machines are always up to date with the latest changes from the remote repository.




 
